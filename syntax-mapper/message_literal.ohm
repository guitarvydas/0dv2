Message_Literal_Rewrite {
  program = item+
  item =
    | message_Literal -- messageliteral
    | any -- other

  message_Literal = sym<"Message"> "(" ws id ws ")" ws "{" ws operand "," ws operand "}" ws

  operand =
    | operand "." id ws -- recursive
    | id ws -- bottom

      dqb = "“"
    dqe = "”"
  string = dqb (~dqb ~dqe any)* dqe ws

    sqb = "❛"
    sqe = "❜"
  charconst = sqb (~sqb ~sqe any)* sqe ws

  id = "❲" (~"❲" ~"❳" any)* "❳" ws


    intb = "⟨"
    inte = "⟩"
  integer = intb (~intb ~inte any)* inte ws

    symb = "❲"
    syme = "❳"
  symbol = symb (~symb ~syme any)* syme ws
  sym<text> = symb text syme ws
    
    kwb = "‹"
    kwe = "›"
  keyword = kwb (~kwb ~kwe any)* kwe ws

    mcb = "⟪"
    mce = "⟫"
  multi_char_operator = mcb (~mcb ~mce any)* mce ws

  indentc = "⇢" ws
  dedentc = "⇠" ws

    vb = "«"
    ve = "»"
  verbatim = vb (~vb ~ve any)* ve ws

  comment = "⎣" (~"⎣" ~"⎦" any)* "⎦" ws

  anyToken1 = string | charconst | id | integer | keyword | multi_char_operator | indentc | dedentc | verbatim | comment | symbol | integer | any
  anyToken = anyToken1 ws

    uspc = "・"
    unl = "⦚"
    in_nl = unl
    
    spc = " "
    nl = "\n"

    commentspace = "◦"
    commentnl = "¶"

    stringspace = "□"
    stringnl = "‡"
    charspace = "☐"
    charnl = "†"

    wsc = space | spc | nl | uspc | unl | indentc | dedentc | commentspace | commentnl | stringspace | stringnl | charspace | charnl | verbatim
    ws = wsc*

}
