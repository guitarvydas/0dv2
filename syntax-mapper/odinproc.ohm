
OdinProcSignature {
  program = item+
  item =
    | proc -- proc
    | anyToken -- other
    
  proc = procSignature procDefinitionBody

  procDefinitionBody = "{" ws bodyStuff "}" ws

  procSignature =
    | id "::" ws pragma? "❲proc❳" ws odinParameterList odinReturnTypeList -- nonvoid
    | id "::" ws pragma? "❲proc❳" ws odinParameterList &procDefinitionBody -- void

  odinParameterList =
    | "(" ws ")" ws -- empty
    | "(" ws lastParameter ")" ws -- single
    | "(" ws notLastParameter+ lastParameter ")" ws -- multiple

  odinReturnType =
    | &procDefinitionBody -- void
    | "->" ws odinReturnTypeList -- typed
  odinReturnTypeList =
    |  "(" ws ")" ws -- empty
    |  "(" ws lastParameter ")" ws -- singlebracketed
    |  "(" ws notLastReturnParameter+ lastReturnParameter ")" ws -- multiple
    | ~"(" singleReturnParameter -- single

  notLastParameter = allocatorOrParameterName anythingButComma "," ws
  lastParameter = allocatorOrParameterName ~anythingButComma anythingButRPar

  notLastReturnParameter = parameterName? anythingButComma "," ws
  lastReturnParameter = parameterName? ~anythingButComma anythingButRPar
  singleReturnParameter = ~procDefinitionBody anythingButProcDefinitionBody

  pragma = "#❲force_inline❳" ws

  parameterName =
    | id &"," -- sharedtype
    | id ":" ws -- named
  allocator =  "❲allocator❳" ws ":=" ws
  allocatorOrParameterName = allocator | parameterName

  bodyStuff = skipTo<"}">
  anythingButComma = skipTo<",">
  anythingButRPar = skipTo<")">
  anythingButProcDefinitionBody = skipTo<procDefinitionBodyBeginning>
  procDefinitionBodyBeginning = "{" ws

 
      dqb = "“"
    dqe = "”"
  string = dqb (~dqb ~dqe any)* dqe ws

    sqb = "❛"
    sqe = "❜"
  charconst = sqb (~sqb ~sqe any)* sqe ws

  id = "❲" (~"❲" ~"❳" any)* "❳" ws


    intb = "⟨"
    inte = "⟩"
  integer = intb (~intb ~inte any)* inte ws

    symb = "❲"
    syme = "❳"
  symbol = symb (~symb ~syme any)* syme ws
    
    kwb = "‹"
    kwe = "›"
  keyword = kwb (~kwb ~kwe any)* kwe ws

    mcb = "⟪"
    mce = "⟫"
  multi_char_operator = mcb (~mcb ~mce any)* mce ws

  indentc = "⇢" ws
  dedentc = "⇠" ws

    vb = "«"
    ve = "»"
  verbatim = vb (~vb ~ve any)* ve ws

  comment = "⎣" (~"⎣" ~"⎦" any)* "⎦" ws

  anyToken1 = string | charconst | id | integer | keyword | multi_char_operator | indentc | dedentc | verbatim | comment | symbol | integer | any
  anyToken = anyToken1 ws

    uspc = "・"
    unl = "⦚"
    in_nl = unl
    
    spc = " "
    nl = "\n"

    commentspace = "◦"
    commentnl = "¶"

    stringspace = "□"
    stringnl = "‡"
    charspace = "☐"
    charnl = "†"

    wsc = space | spc | nl | uspc | unl | commentspace | commentnl | stringspace | stringnl | charspace | charnl | comment | verbatim
    ws = wsc*

    skipTo<stopBefore> =
    | &stopBefore -- done
    | inner skipTo<stopBefore> -- continue
  inner =
    | "(" ws inner* ")" ws -- nestedparens
    | "{" ws inner* "}" ws -- nestedbraces
    | ~"(" ~")" anyToken -- bottom
  
}

