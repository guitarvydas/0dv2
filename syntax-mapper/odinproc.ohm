
OdinProcSignature {
  program = item+
  item =
    | proc -- proc
    | anyToken -- other
    
  proc = procSignature procDefinitionBody

  procDefinitionBody = "{" bodyStuff "}"

  procSignature =
    | id "::" pragma? "❲proc❳" odinParameterList odinReturnTypeList -- nonvoid
    | id "::" pragma? "❲proc❳" odinParameterList &procDefinitionBody -- void

  pdinParameterList =
    | "(" ")" -- empty
    | "(" lastParameter ")" -- single
    | "(" notLastParameter+ LastParameter ")" -- multiple

  odinReturnType =
    | &procDefinitionBody -- void
    | "->" odinReturnTypeList -- typed
  odinReturnTypeList =
    |  "(" ")" -- empty
    |  "(" lastParameter ")" -- singlebracketed
    |  "(" notLastReturnParameter+ LastReturnParameter ")" -- multiple
    | ~"(" singleReturnParameter -- single

  notLastParameter = allocatorOrParameterName anythingButComma ","
  lastParameter = allocatorOrParameterName ~anythingButComma anythingButRPar

  notLastReturnParameter = parameterName? anythingButComma ","
  lastReturnParameter = parameterName? ~anythingButComma anythingButRPar
  singleReturnParameter = ~procDefinitionBody anythingButProcDefinitionBody

  pragma = "#" "❲force_inline❳"

  parameterName =
    | id &"," -- sharedtype
    | id ":" -- named
  allocator =  "❲allocator❳" ":="
  allocatorOrParameterName = allocator | parameterName

  bodyStuff = skipTo<"}">
  anythingButComma = skipTo<",">
  anythingButRPar = skipTo<")">
  anythingButProcDefinitionBody = skipTo<procDefinitionBodyBeginning>
  procDefinitionBodyBeginning = "{"  

 
      dqb = "“"
    dqe = "”"
  string = dqb (~dqb ~dqe any)* dqe

    sqb = "❛"
    sqe = "❜"
  charconst = sqb (~sqb ~sqe any)* sqe

  ID = "❲" (~"❲" ~"❳" any)* "❳"


    intb = "⟨"
    inte = "⟩"
  integer = intb (~intb ~inte any)* inte

    symb = "❲"
    syme = "❳"
  symbol = symb (~symb ~syme any)* syme
    
    kwb = "‹"
    kwe = "›"
  keyword = kwb (~kwb ~kwe any)* kwe

    mcb = "⟪"
    mce = "⟫"
  multi_char_operator = mcb (~mcb ~mce any)* mce

  indentc = "⇢"
  dedentc = "⇠"

    vb = "«"
    ve = "»"
  verbatim = vb (~vb ~ve any)* ve

  comment = "⎣" (~"⎣" ~"⎦" any)* "⎦" 

  AnyToken = string | charconst | ID | integer | keyword | multi_char_operator | indentc | dedentc | verbatim | comment | symbol | integer | any

    uspc = "・"
    unl = "⦚"
    in_nl = unl
    
    spc = " "
    nl = "\n"
  // space += uspc | unl | comment


  space += uspc | unl | comment
    SkipTo<stopBefore> =
    | &stopBefore -- done
    | Inner SkipTo<stopBefore> -- continue
  Inner =
    | "(" Inner* ")" -- nestedparens
    | "{" Inner* "}" -- nestedbraces
    | ~"(" ~")" AnyToken -- bottom
  
}

