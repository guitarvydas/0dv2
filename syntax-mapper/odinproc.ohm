
OdinProcSignature {
  Program = Item+
  Item =
    | Proc -- proc
    | AnyToken -- other
    
  Proc = ProcSignature ProcDefinitionBody

  ProcDefinitionBody = "{" BodyStuff "}"

  ProcSignature =
    | ID "::" Pragma? "❲proc❳" OdinParameterList OdinReturnTypeList -- nonvoid
    | ID "::" Pragma? "❲proc❳" OdinParameterList &ProcDefinitionBody -- void

  OdinParameterList =
    | "(" ")" -- empty
    | "(" LastParameter ")" -- single
    | "(" NotLastParameter+ LastParameter ")" -- multiple

  OdinReturnType =
    | &ProcDefinitionBody -- void
    | "->" OdinReturnTypeList -- typed
  OdinReturnTypeList =
    |  "(" ")" -- empty
    |  "(" LastParameter ")" -- singlebracketed
    |  "(" NotLastReturnParameter+ LastReturnParameter ")" -- multiple
    | ~"(" SingleReturnParameter -- single

  NotLastParameter = AllocatorOrParameterName AnythingButComma ","
  LastParameter = AllocatorOrParameterName ~AnythingButComma AnythingButRPar

  NotLastReturnParameter = ParameterName? AnythingButComma ","
  LastReturnParameter = ParameterName? ~AnythingButComma AnythingButRPar
  SingleReturnParameter = ~ProcDefinitionBody AnythingButProcDefinitionBody

  Pragma = "#" "❲force_inline❳"

  ParameterName =
    | ID &"," -- sharedtype
    | ID ":" -- named
  Allocator =  "❲allocator❳" ":="
  AllocatorOrParameterName = Allocator | ParameterName

  BodyStuff = SkipTo<"}">
  AnythingButComma = SkipTo<",">
  AnythingButRPar = SkipTo<")">
  AnythingButProcDefinitionBody = SkipTo<ProcDefinitionBodyBeginning>
  ProcDefinitionBodyBeginning = "{"  

 
      dqb = "“"
    dqe = "”"
  string = dqb (~dqb ~dqe any)* dqe

    sqb = "❛"
    sqe = "❜"
  charconst = sqb (~sqb ~sqe any)* sqe

  ID = "❲" (~"❲" ~"❳" any)* "❳"


    intb = "⟨"
    inte = "⟩"
  integer = intb (~intb ~inte any)* inte

    kwb = "‹"
    kwe = "›"
  keyword = kwb (~kwb ~kwe any)* kwe

    mcb = "⟪"
    mce = "⟫"
  multi_char_operator = mcb (~mcb ~mce any)* mce

  indentc = "⇢"
  dedentc = "⇠"

    vb = "«"
    ve = "»"
  verbatim = vb (~vb ~ve any)* ve

  comment = "⎣" (~"⎣" ~"⎦" any)* "⎦" 

  AnyToken = string | charconst | ID | integer | keyword | multi_char_operator | indentc | dedentc | verbatim | comment | any

    uspc = "・"
    unl = "⦚"
    in_nl = unl
    
    spc = " "
    nl = "\n"
  // space += uspc | unl | comment


  space += uspc | unl | comment
    SkipTo<stopBefore> =
    | &stopBefore -- done
    | Inner SkipTo<stopBefore> -- continue
  Inner =
    | "(" Inner* ")" -- nestedparens
    | "{" Inner* "}" -- nestedbraces
    | ~"(" ~")" AnyToken -- bottom
  
}

