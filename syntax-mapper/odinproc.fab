OdinProcSignature {
  program [item+] = ‛«item»’
  item [i] = ‛«i»’


  proc [ProcSignature ProcDefinitionBody] = ‛\n«ProcSignature»⇢ {
⎨⎧ ❲_❳ ⎬
 ⇢
«ProcDefinitionBody»
⇠
⎨⎭ ❲_❳  ⎬
}
’

  procDefinitionBody [lb ws1 BodyStuff rb ws2] = ‛«ws1»«BodyStuff»«ws2»’

  procSignature_nonvoid [ID ws0 kcc ws1 Pragma? kproc ws2 OdinParameterList OdinReturnTypeList] = ‛«ID» :: ‹proc› «OdinParameterList»’
  procSignature_void [ID ws0 kcc ws1 Pragma? kproc ws2 OdinParameterList lookahead] = ‛«ID» :: ‹proc› «OdinParameterList»’

  odinParameterList_empty [lp ws1 rp ws2] = ‛()’
  odinParameterList_single [lp ws1 LastParameter rp ws2] = ‛(«LastParameter»)’
  odinParameterList_multiple [lp ws1 NotLastParameter+ LastParameter rp ws2] = ‛(«NotLastParameter» «LastParameter»)’

  odinReturnType_void [lookahead] = ‛’
  odinReturnType_typed [karrow ws1 OdinReturnTypeList] = ‛->«ws1»«OdinReturnTypeList»’
  odinReturnTypeList_empty [lp ws1 rp ws2] = ‛(«ws1»)«ws2»’
  odinReturnTypeList_singlebracketed [lp ws1 LastParameter rp ws2] = ‛(«ws1»«LastParameter»)«ws2»’
  odinReturnTypeList_multiple [lp ws1 NotLastParameter+ LastParameter rp ws2] = ‛(«ws1»«NotLastParameter» «LastParameter»)«ws2»’
  odinReturnTypeList_single [SingleReturnParameter] = ‛«SingleReturnParameter»’

  notLastParameter [AllocatorOrParameterName AnythingButComma kcomma ws1] = ‛«AllocatorOrParameterName»’
  lastParameter [AllocatorOrParameterName AnythingButRPar] = ‛«AllocatorOrParameterName»’

  notLastReturnParameter [ParameterName? AnythingButComma kcomma ws1] = ‛«ParameterName» «AnythingButComma»,«ws1»’
  lastReturnParameter [ParameterName? AnythingButRPar] = ‛«ParameterName» «AnythingButRPar»’
  singleReturnParameter [AnythingButProcDefinitionBody] = ‛«AnythingButProcDefinitionBody»’

  pragma [kfi ws1] = ‛’

  parameterName_sharedtype [ID ws lookahead] = ‛«ID» ’
  parameterName_named [ID ws kcolon ws1] = ‛«ID» ’
  allocator [kallocator ws1 kassign ws2] = ‛’
  allocatorOrParameterName [x] = ‛«x»’

  bodyStuff [stuff] = ‛«stuff»’
  anythingButComma [stuff] = ‛«stuff»’
  anythingButRPar [stuff] = ‛«stuff»’
  anythingButProcDefinitionBody [stuff] = ‛«stuff»’
  
  
  string [kb1 cs* ke] = ‛«kb1»«cs»«ke»’
  charconst [kb2 cs* ke] = ‛«kb2»«cs»«ke»’
  id [kb3 cs* ke] = ‛«kb3»«cs»«ke»’
  integer [kb4 cs* ke] = ‛«kb4»«cs»«ke»’
  symbol [kb5 cs* ke] = ‛«kb5»«cs»«ke»’
  keyword [kb6 cs* ke] = ‛«kb6»«cs»«ke»’
  multi_char_operator [kb7 cs* ke] = ‛«kb7»«cs»«ke»’
  verbatim [kb8 cs* ke] = ‛«kb8»«cs»«ke»’
  comment [kb9 cs* ke] = ‛«kb9»«cs»«ke»’
  anyToken [anyToken1] = ‛«anyToken1»’
  annotation [ab cs* ae] = ‛«ab»«cs»«ae»’
  
  ws [wsc*] = ‛«wsc»’

  sym [kbegin text kend] = ‛«kbegin»«text»«kend»’

  indentc [k] = ‛«k»’
  dedentc [k] = ‛«k»’


    skipTo_done [lookahead] = ‛’
  skipTo_continue [i x] = ‛«i»«x»’
  skipTo_macro [x] = ‛«x»’
  inner_nestedparens [l ws1 Inner* r] = ‛«l»«ws1»«Inner»«r»’
  inner_nestedbraces [l ws1 Inner* r] = ‛«l»«ws1»«Inner»«r»’
  inner_bottom [AnyToken] = ‛«AnyToken»’

  scopeOpen  [ab scopebegin ws1 id1 ws2 id2 ws3 ae] = ‛«ab»«scopebegin»«ws1»«id1»«ws2»«id2»«ws3»«ae»’
  scopeClose [ab scopeend   ws1 id1 ws2         ae] = ‛«ab»«scopeend»«ws1»«id1»«ws2»«ae»’

}

