QueueRewrite {
  program [items+] = ‛«items»’
  item [x] = ‛«x»’

  push [kqueue ws1 kdot ws2 kpushback ws3 lp ws4 kamp ws5 operand1 operand2 rp ws6] = ‛ «operand1».enqueue («operand2») ’
  pop [kqueue ws1 kdot ws2 kpopfrontsafe ws3 lp ws4 kamp ws5 operand1 rp ws6] = ‛ «operand1».dequeue () ’

  notlastoperand [anythingButComma kcomma ws1] = ‛«anythingButComma»’
  lastoperand [anythingButRPar ws1] = ‛«anythingButRPar»’

  anythingButComma [stuff ws] = ‛«stuff»«ws»’
  anythingButRPar [stuff ws] = ‛«stuff»«ws»’

  
  string [kb cs* ke ws] = ‛«kb»«cs»«ke»«ws»’
  charconst [kb cs* ke ws] = ‛«kb»«cs»«ke»«ws»’
  id [kb cs* ke ws] = ‛«kb»«cs»«ke»«ws»’
  integer [kb cs* ke ws] = ‛«kb»«cs»«ke»«ws»’
  symbol [kb cs* ke ws] = ‛«kb»«cs»«ke»«ws»’
  keyword [kb cs* ke ws] = ‛«kb»«cs»«ke»«ws»’
  multi_char_operator [kb cs* ke ws] = ‛«kb»«cs»«ke»«ws»’
  verbatim [kb cs* ke ws] = ‛«kb»«cs»«ke»«ws»’
  comment [kb cs* ke ws] = ‛«kb»«cs»«ke»«ws»’
  anyToken [anyToken1 ws] = ‛«anyToken1»«ws»’
  
  ws [wsc*] = ‛«wsc»’
    skipTo_done [lookahead] = ‛’
  skipTo_continue [i x] = ‛«i» «x»’
  inner_nestedparens [l ws1 Inner* r ws2] = ‛«l»«ws1»«Inner»«r»«ws2»’
  inner_nestedbraces [l ws1 Inner* r ws2] = ‛«l»«ws1»«Inner»«r»«ws2»’
  inner_bottom [AnyToken] = ‛«AnyToken»’


}

